---
- name: Migrate VMs from VMware to OpenShift Virtualization using MTV
  hosts: localhost
  vars:
    ocp_url: "https://api.ibmcoe.techmapps.local:6443"
    ocp_token: "sha256~qdUBdeRmjZBDAixzxILHH-U8J3UJ945CKz75HCvnSf8"
    mtv_namespace: "vm-migration"
    migration_plan_name: "vm-migration-plan-001"
    migration_source_name: "vmware"
    target_namespace: "vm-migration"
    vms_to_migrate:  # List of VMs to migrate
      - "Application01"
      - "Application02"
      - "cp-open5gs"
    source_provider: "vmware" # Source VMware provider name in MTV
    target_provider: "ocp-virt"  # Target OpenShift Virtualization provider in MTV
    networkmap_name: "networkmap-001"
    storagemap_name: "storagemap-001"

  tasks:

    - name: Authenticate with OpenShift (bypassing self-signed cert)
      shell: |
        oc login --server={{ ocp_url }} --token={{ ocp_token }} --insecure-skip-tls-verify=true
    - name: Create the migration plan for the VMs
      shell: >
        oc apply -f - <<EOF
        apiVersion: forklift.konveyor.io/v1beta1
        kind: Plan
        metadata:
          name: {{ migration_plan_name }}
          namespace: {{ mtv_namespace }}
        spec:
          map:
            network:
              name: {{ networkmap_name }}
              namespace: {{ target_namespace }}
            storage:
              name: {{ storagemap_name }}
              namespace: {{ target_namespace }}
          provider:
            destination:
              name: {{ target_provider }}
              namespace: {{ target_namespace }}
            source:
              name: {{ source_provider }}
              namespace: {{ target_namespace }}
          targetNamespace: {{ target_namespace }}
          vms:
          {% for vm in vms_to_migrate %}
            - name: {{ vm }}
          {% endfor %}
        EOF
      register: apply_plan_output
    - name: Debug plan creation output
      debug:
        var: apply_plan_output.stdout
    - name: Start the migration plan
      shell: |
        oc patch plan {{ migration_plan_name }} -n {{ mtv_namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/targetState", "value": "Started"}]'

    - name: Monitor the migration progress
      shell: |
        oc get plan {{ migration_plan_name }} -n {{ mtv_namespace }} -o jsonpath="{.status.conditions[*].reason}"

    - name: Confirm migration completion
      shell: |
        oc get plan {{ migration_plan_name }} -n {{ mtv_namespace }} -o jsonpath="{.status.conditions[?(@.type=='Succeeded')].status}"
      register: migration_status
      until: migration_status.stdout == "True"
      retries: 10
      delay: 30
